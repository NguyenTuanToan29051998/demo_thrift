// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package demothrift

import (
  "bytes"
  "context"
  "fmt"
  "github.com/apache/thrift/lib/go/thrift"
  "reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Demo interface {
  HelloWould(ctx context.Context) (err error)
}

type DemoClient struct {
  c thrift.TClient
}

func NewDemoClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DemoClient {
  return &DemoClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewDemoClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DemoClient {
  return &DemoClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewDemoClient(c thrift.TClient) *DemoClient {
  return &DemoClient{
    c: c,
  }
}

func (p *DemoClient) Client_() thrift.TClient {
  return p.c
}
func (p *DemoClient) HelloWould(ctx context.Context) (err error) {
  var _args0 DemoHelloWouldArgs
  var _result1 DemoHelloWouldResult
  if err = p.Client_().Call(ctx, "HelloWould", &_args0, &_result1); err != nil {
    return err
  }
  return nil
}

type DemoProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Demo
}

func (p *DemoProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *DemoProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *DemoProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewDemoProcessor(handler Demo) *DemoProcessor {

  self2 := &DemoProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["HelloWould"] = &demoProcessorHelloWould{handler:handler}
return self2
}

func (p *DemoProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type demoProcessorHelloWould struct {
  handler Demo
}

func (p *demoProcessorHelloWould) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoHelloWouldArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("HelloWould", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoHelloWouldResult{}
  var err2 error
  if err2 = p.handler.HelloWould(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HelloWould: " + err2.Error())
    oprot.WriteMessageBegin("HelloWould", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("HelloWould", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type DemoHelloWouldArgs struct {
}

func NewDemoHelloWouldArgs() *DemoHelloWouldArgs {
  return &DemoHelloWouldArgs{}
}

func (p *DemoHelloWouldArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoHelloWouldArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HelloWould_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoHelloWouldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoHelloWouldArgs(%+v)", *p)
}

type DemoHelloWouldResult struct {
}

func NewDemoHelloWouldResult() *DemoHelloWouldResult {
  return &DemoHelloWouldResult{}
}

func (p *DemoHelloWouldResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoHelloWouldResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HelloWould_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoHelloWouldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoHelloWouldResult(%+v)", *p)
}


